import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { Fragment, useEffect, useState } from 'react';
import { useAccount, useConfig, useWriteContract } from 'wagmi';
import {
  readContract,
} from '@wagmi/core';
// Contract ABI
const contractABI = [
  {
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
  {
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "mint",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
]
const contractAddress = '0x3E5A75bD2b60a502AcE0da9746de2E15Aed0b2B5'

const Home: NextPage = () => {
  const {address}= useAccount();
  const config = useConfig();
  
  const [inputValue, setInputValue] = useState<number>(0);
  const { data: hash, writeContract, isSuccess, isPending, isError, error } = useWriteContract()
  const [balance, setBalance] = useState<number | null>(null);
  useEffect(() => {
    console.log('isError is', isError);
    console.log('error is', error);
    
  }, [isError])
  
  const hadleWriteContract = async () => {
    writeContract({
      address: contractAddress,
      abi: contractABI,
      functionName: 'mint',
      args: [address, inputValue],
    })
  }
  const handleRetrieve = async () => {
    const balance = (await readContract(config, {
      address: contractAddress,
      abi: contractABI,
      functionName: 'balanceOf',
      args: [address],
    })) as bigint;
    console.log('balance is',balance.toString());
    setBalance(Number(balance));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>
          Connect DApp to a Basic Smart Contract
        </h1>

        <section className={styles.card}>
          <h2>Mint Token</h2>
          <input
            type="number"
            value={inputValue}
            onChange={(e) => setInputValue(Number(e.target.value))}
            placeholder="Enter a value"
          />
          <button onClick={hadleWriteContract} disabled={isPending || isError}>
            {isPending ? 'Minting...' : 'Mint'}
          </button>
          <p>{isError && 'Error minting token'}</p>
          {isSuccess && hash && 
            <Fragment>
              <p>{`Function executed \n with hash`}</p>
              <p style={{fontSize: 10}}>{`Hash ${hash}`}</p>
            </Fragment>
            }
        </section>

        <section className={styles.card}>
          <h2>Fetch Balance</h2>
          <button onClick={handleRetrieve}>
            Retrieve Balance
          </button>
          {balance !== null && <p>Balance is: {balance}</p>}
        </section>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;
